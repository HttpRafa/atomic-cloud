package node:driver;

interface log {
    variant level {
        debug,
        info,
        warn,
        error,
    }
    log-string: func(level: level, message: string);
}

interface http {
    variant method {
        get,
        post,
        put,
        delete,
    }
    record header {
        key: string,
        value: string,
    }
    record response {
        status-code: u32,
        reason-phrase: string,
        headers: list<header>,
        bytes: list<u8>,
    }
    send-http-request: func(method: method, url: string, headers: list<header>) -> option<response>;
}

interface api {
    get-name: func() -> string;
}

interface bridge {
    // Init
    record information {
        authors: list<string>,
        version: string,
        ready: bool,
    }

    // Nodes
    variant capability {
        limited-memory(u32),
        unlimited-memory(bool),
        max-allocations(u32),
        sub-node(string)
    }

    resource generic-node {
        constructor(name: string, capabilities: list<capability>);
        allocate-ports: func(amount: u32) -> result<list<u32>, string>;
    }

    resource generic-driver {
        constructor();
        // NOTE: Do not call any log or http functions in the constructor as they may not be available yet
        init: func() -> information;
        init-node: func(name: string, capabilities: list<capability>) -> result<generic-node, string>;
    }
}

world driver {
    export bridge;
    import api;
    import log;
    import http;
}