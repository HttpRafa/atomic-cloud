use std::fs;

use crate::{
    error,
    exports::cloudlet::driver::bridge::{
        Capabilities, GenericCloudlet, GuestGenericDriver, Information, RemoteController,
    },
    storage::Storage,
};

pub mod cloudlet;

// Include the build information generated by build.rs
include!(concat!(env!("OUT_DIR"), "/build_info.rs"));

pub const AUTHORS: [&str; 1] = ["HttpRafa"];

pub struct Local {
    /* Cloud Identification */
    cloud_identifier: String,
}

impl GuestGenericDriver for Local {
    fn new(cloud_identifier: String) -> Self {
        Self { cloud_identifier }
    }

    fn init(&self) -> Information {
        let mut ready = true;

        let tmp_dir = Storage::get_temporary_folder();
        if tmp_dir.exists() {
            if let Err(error) = fs::remove_dir_all(tmp_dir) {
                error!(
                    "<red>Failed</> to remove temporary directory: <red>{}</>",
                    error
                );
                ready = false;
            }
        }

        Information {
            authors: AUTHORS.iter().map(|&author| author.to_string()).collect(),
            version: VERSION.to_string(),
            ready,
        }
    }

    fn init_cloudlet(
        &self,
        _name: String,
        _capabilities: Capabilities,
        _controller: RemoteController,
    ) -> Result<GenericCloudlet, String> {
        Err("Not implemented".to_string())
    }
}

pub struct LocalCloudletWrapper {}
