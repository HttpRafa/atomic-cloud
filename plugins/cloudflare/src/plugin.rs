use anyhow::Result;

use crate::{
    generated::{
        exports::plugin::system::{
            bridge::{
                Capabilities, ErrorMessage, GuestPlugin, Information, Listener as GenericListener,
                Node as GenericNode, ScopedErrors,
            },
            event::Events,
        },
        plugin::system::data_types::Features,
    },
    listener::Listener,
};

// Include the build information generated by build.rs
include!(concat!(env!("OUT_DIR"), "/build_info.rs"));

pub const AUTHORS: [&str; 1] = ["HttpRafa"];
pub const FEATURES: Features = Features::LISTENER;

pub struct Cloudflare();

impl GuestPlugin for Cloudflare {
    fn new(_: String) -> Self {
        Self {}
    }

    fn init(&self) -> Information {
        Information {
            authors: AUTHORS.iter().map(|author| (*author).to_string()).collect(),
            version: VERSION.to_string(),
            features: FEATURES,
            ready: true,
        }
    }

    fn init_listener(&self) -> (Events, GenericListener) {
        (
            Events::SERVER_START | Events::SERVER_STOP,
            GenericListener::new(Listener()),
        )
    }

    fn init_node(
        &self,
        _: String,
        _: Capabilities,
        _: String,
    ) -> Result<GenericNode, ErrorMessage> {
        unimplemented!()
    }

    fn tick(&self) -> Result<(), ScopedErrors> {
        Ok(())
    }

    fn shutdown(&self) -> Result<(), ScopedErrors> {
        Ok(())
    }
}
