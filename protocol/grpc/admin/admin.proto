syntax = "proto3";

option java_multiple_files = true;
option java_package = "io.atomic.cloud.grpc.admin";

package admin;

import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";

// Admin Service
service AdminService {
    rpc RequestStop(google.protobuf.Empty) returns (google.protobuf.Empty);

    // Resource Management
    rpc SetResourceStatus(ResourceManagement.SetResourceStatusRequest) returns (google.protobuf.Empty);
    rpc DeleteResource(ResourceManagement.DeleteResourceRequest) returns (google.protobuf.Empty);

    // Driver Management
    rpc GetDrivers(google.protobuf.Empty) returns (DriverManagement.DriverListResponse);

    // Cloudlet Management
    rpc CreateCloudlet(CloudletManagement.CloudletValue) returns (google.protobuf.Empty);
    rpc GetCloudlet(google.protobuf.StringValue) returns (CloudletManagement.CloudletValue);
    rpc GetCloudlets(google.protobuf.Empty) returns (CloudletManagement.CloudletListResponse);

    // Deployment Management
    rpc CreateDeployment(DeploymentManagement.DeploymentValue) returns (google.protobuf.Empty);
    rpc GetDeployment(google.protobuf.StringValue) returns (DeploymentManagement.DeploymentValue);
    rpc GetDeployments(google.protobuf.Empty) returns (DeploymentManagement.DeploymentListResponse);

    // Unit Management
    rpc GetUnit(google.protobuf.StringValue) returns (UnitManagement.UnitValue);
    rpc GetUnits(google.protobuf.Empty) returns (UnitManagement.UnitListResponse);

    // User Management
    rpc TransferUser(UserManagement.TransferUserRequest) returns (google.protobuf.BoolValue);

    // Information
    rpc GetProtocolVersion(google.protobuf.Empty) returns (google.protobuf.UInt32Value);
    rpc GetControllerVersion(google.protobuf.Empty) returns (google.protobuf.StringValue);
}

// Resource Management
message ResourceManagement {
    message SetResourceStatusRequest {
        ResourceCategory category = 1;
        string id = 2;
        ResourceStatus status = 3;
    }

    message DeleteResourceRequest {
        ResourceCategory category = 1;
        string id = 2;
    }

    enum ResourceCategory {
        CLOUDLET = 0;
        DEPLOYMENT = 1;
        UNIT = 2;
    }

    enum ResourceStatus {
        ACTIVE = 0;
        RETIRED = 1;
    }
}

// Driver Management
message DriverManagement {
    message DriverListResponse {
        repeated string drivers = 1;
    }
}

// Cloudlet Management
message CloudletManagement {
    message CloudletListResponse {
        repeated string cloudlets = 1;
    }

    message CloudletValue {
        string name = 1;
        string driver = 2;

        optional uint32 memory = 3;
        optional uint32 maxAllocations = 4;
        optional string child = 5;
        string controllerAddress = 6;
    }
}

// Deployment Management
message DeploymentManagement {
    message DeploymentListResponse {
        repeated string deployments = 1;
    }

    message DeploymentValue {
        string name = 1;
        repeated string cloudlets = 2;
        Constraints constraints = 3;
        optional Scaling scaling = 4;
        UnitManagement.UnitResources resources = 5;
        UnitManagement.UnitSpec spec = 6;

        message Constraints {
            uint32 minimum = 1;
            uint32 maximum = 2;
            int32 priority = 3;
        }

        message Scaling {
            uint32 maxPlayers = 1;
            float startThreshold = 2;
            bool stopEmptyUnits = 3;
        }
    }
}

// Unit Management
message UnitManagement {
    message UnitListResponse {
        repeated SimpleUnitValue units = 1;
    }

    message SimpleUnitValue {
        string name = 1;
        string uuid = 2;
        optional string deployment = 3;
        string cloudlet = 4;
    }

    message UnitValue {
        string name = 1;
        string uuid = 2;
        optional string deployment = 3;
        string cloudlet = 4;
        UnitAllocation allocation = 5;
        uint32 connectedUsers = 6;
        string authToken = 7;
        UnitState state = 8;
        bool rediness = 9;
    }

    message UnitAllocation {
        repeated Common.Address addresses = 1;
        UnitResources resources = 2;
        UnitSpec spec = 3;
    }

    message UnitResources {
        uint32 memory = 1;
        uint32 swap = 2;
        uint32 cpu = 3;
        uint32 io = 4;
        uint32 disk = 5;
        uint32 addresses = 6;
    }

    message UnitSpec {
        string image = 1;
        repeated Common.KeyValue settings = 2;
        repeated Common.KeyValue environment = 3;
        optional Retention diskRetention = 4;
        optional Fallback fallback = 5;

        message Fallback {
            bool enabled = 1;
            int32 priority = 2;
        }

        enum Retention {
            TEMPORARY = 0;
            PERMANENT = 1;
        }
    }

    enum UnitState {
        STARTING = 0;
        PREPARING = 1;
        RESTARTING = 2;
        RUNNING = 3;
        STOPPING = 4;
    }
}

// User Management
message UserManagement {
    message TransferTargetValue {
        string target = 1;
        TargetType targetType = 2;

        enum TargetType {
            UNIT = 0;
            DEPLOYMENT = 1;
        }
    }

    message TransferUserRequest {
        string userUuid = 1;
        TransferTargetValue target = 2;
    }
}

// Common
message Common {
    message KeyValue {
        string key = 1;
        string value = 2;
    }

    message Address {
        string ip = 1;
        uint32 port = 2;
    }
}