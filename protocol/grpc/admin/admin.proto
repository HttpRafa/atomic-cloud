syntax = "proto3";

option java_multiple_files = true;
option java_package = "io.atomic.cloud.grpc.admin";

package admin;
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";

service AdminService {
    rpc RequestStop(google.protobuf.Empty) returns (google.protobuf.Empty);

    // Resource Management
    rpc SetResourceStatus(SetResourceStatusRequest) returns (google.protobuf.Empty);
    rpc DeleteResource(DeleteResourceRequest) returns (google.protobuf.Empty);

    // Node Management
    rpc CreateNode(NodeValue) returns (google.protobuf.Empty);
    rpc GetNode(google.protobuf.StringValue) returns (NodeValue);
    rpc GetNodes(google.protobuf.Empty) returns (NodeListResponse);

    // Group Management
    rpc CreateGroup(GroupValue) returns (google.protobuf.Empty);
    rpc GetGroup(google.protobuf.StringValue) returns (GroupValue);
    rpc GetGroups(google.protobuf.Empty) returns (GroupListResponse);

    // Server Management
    rpc GetServers(google.protobuf.Empty) returns (ServerListResponse);
}

// Resource Management
message SetResourceStatusRequest {
    ResourceCategory category = 1;
    string id = 2;
    ResourceStatus status = 3;

    enum ResourceCategory {
        NODE = 0;
        GROUP = 1;
    }

    enum ResourceStatus {
        ACTIVE = 0;
        RETIRED = 1;
    }
}

message DeleteResourceRequest {
    ResourceCategory category = 1;
    string id = 2;

    enum ResourceCategory {
        NODE = 0;
        GROUP = 1;
        SERVER = 2;
    }
}

// Node Management
message NodeListResponse {
    repeated string nodes = 1;
}

message NodeValue {
    string name = 1;
    string driver = 2;

    // Capabilities
    optional uint32 memory = 3;
    optional uint32 maxAllocations = 4;
    optional string subNode = 5;

    // Remote Controller
    string controllerAddress = 6;
}

// Group Management
message GroupListResponse {
    repeated string groups = 1;
}

message GroupValue {
    string name = 1;
    repeated string nodes = 2;
    Constraints constraints = 3;
    optional Scaling scaling = 4;
    Resources resources = 5;
    Deployment deployment = 6;

    message Constraints {
        uint32 minimum = 1;
        uint32 maximum = 2;
        int32 priority = 3;
    }

    message Scaling {
        uint32 maxPlayers = 1;
        float startThreshold = 2;
        bool stopEmptyServers = 3;
    }

    message Resources {
        uint32 memory = 1;
        uint32 swap = 2;
        uint32 cpu = 3;
        uint32 io = 4;
        uint32 disk = 5;
        uint32 addresses = 6;
    }

    message Deployment {
        string image = 1;
        repeated KeyValue settings = 2;
        repeated KeyValue environment = 3;
        optional Retention diskRetention = 4;
        optional Fallback fallback = 5;

        message Fallback {
            bool enabled = 1;
            int32 priority = 2;
        }

        message KeyValue {
            string key = 1;
            string value = 2;
        }

        enum Retention {
            TEMPORARY = 0;
            PERMANEMT = 1;
        } 
    }
}

// Server Management
message ServerListResponse {
    repeated string servers = 1;
}