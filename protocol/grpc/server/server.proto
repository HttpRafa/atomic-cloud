syntax = "proto3";

option java_multiple_files = true;
option java_package = "io.atomic.cloud.grpc.server";

package server;
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";

service ServerService {
    // Heartbeat
    rpc BeatHeart(google.protobuf.Empty) returns (google.protobuf.Empty);

    // Ready
    rpc MarkReady(google.protobuf.Empty) returns (google.protobuf.Empty);
    rpc MarkNotReady(google.protobuf.Empty) returns (google.protobuf.Empty);

    // Health
    rpc MarkRunning(google.protobuf.Empty) returns (google.protobuf.Empty);
    rpc RequestStop(google.protobuf.Empty) returns (google.protobuf.Empty); // Implies not ready

    // Users
    rpc UserConnected(UserConnectedRequest) returns (google.protobuf.Empty);
    rpc UserDisconnected(UserDisconnectedRequest) returns (google.protobuf.Empty);

    // Transfers
    rpc SubscribeToTransfers(google.protobuf.Empty) returns (stream ResolvedTransferResponse);
    rpc TransferAllUsers(TransferTargetValue) returns (google.protobuf.UInt32Value);
    rpc TransferUser(TransferRequest) returns (google.protobuf.BoolValue);

    // Channels
    rpc SendMessageToChannel(ChannelMessageValue) returns (google.protobuf.UInt32Value);
    rpc UnsubscribeFromChannel(google.protobuf.StringValue) returns (google.protobuf.Empty);
    rpc SubscribeToChannel(google.protobuf.StringValue) returns (stream ChannelMessageValue);

    // Housekeeping
    rpc Reset(google.protobuf.Empty) returns (google.protobuf.Empty);

    // Information
    rpc GetControllerVersion(google.protobuf.Empty) returns (google.protobuf.StringValue);
}

message UserDisconnectedRequest {
    string uuid = 1;
}

message UserConnectedRequest {
    string name = 1;
    string uuid = 2;
}

message TransferTargetValue {
    string target = 1;
    TargetType targetType = 2;

    enum TargetType {
        SERVER = 0;
        GROUP = 1;
    }
}

message TransferRequest {
    string userUuid = 1;
    TransferTargetValue target = 2;
}

message ResolvedTransferResponse {
    string userUuid = 1;
    string host = 2;
    uint32 port = 3;
}

message ChannelMessageValue {
    string channel = 1;
    uint32 id = 2;
    string data = 3;
    uint64 timestamp = 4;
}