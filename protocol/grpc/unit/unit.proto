syntax = "proto3";

option java_multiple_files = true;
option java_package = "io.atomic.cloud.grpc.unit";

package unit;

import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";

// Unit Service
service UnitService {
    // Heartbeat Management
    rpc BeatHeart(google.protobuf.Empty) returns (google.protobuf.Empty);

    // Ready State Management
    rpc MarkReady(google.protobuf.Empty) returns (google.protobuf.Empty);
    rpc MarkNotReady(google.protobuf.Empty) returns (google.protobuf.Empty);

    // Health Management
    rpc MarkRunning(google.protobuf.Empty) returns (google.protobuf.Empty);
    rpc RequestStop(google.protobuf.Empty) returns (google.protobuf.Empty); // Implies not ready

    // User Management
    rpc UserConnected(UserManagement.UserConnectedRequest) returns (google.protobuf.Empty);
    rpc UserDisconnected(UserManagement.UserDisconnectedRequest) returns (google.protobuf.Empty);

    // Transfer Management
    rpc SubscribeToTransfers(google.protobuf.Empty) returns (stream TransferManagement.ResolvedTransferResponse);
    rpc TransferUsers(TransferManagement.TransferUsersRequest) returns (google.protobuf.UInt32Value);

    // Channel Management
    rpc SendMessageToChannel(ChannelManagement.ChannelMessageValue) returns (google.protobuf.UInt32Value);
    rpc UnsubscribeFromChannel(google.protobuf.StringValue) returns (google.protobuf.Empty);
    rpc SubscribeToChannel(google.protobuf.StringValue) returns (stream ChannelManagement.ChannelMessageValue);

    // Unit Information
    rpc GetUnits(google.protobuf.Empty) returns (UnitInformation.UnitListResponse);

    // Housekeeping
    rpc Reset(google.protobuf.Empty) returns (google.protobuf.Empty);

    // Information
    rpc GetProtocolVersion(google.protobuf.Empty) returns (google.protobuf.UInt32Value);
    rpc GetControllerVersion(google.protobuf.Empty) returns (google.protobuf.StringValue);
}

// User Management
message UserManagement {
    message UserConnectedRequest {
        string name = 1;
        string uuid = 2;
    }

    message UserDisconnectedRequest {
        string uuid = 1;
    }
}

// Transfer Management
message TransferManagement {
    message TransferTargetValue {
        TargetType targetType = 1;
        optional string target = 2;

        enum TargetType {
            UNIT = 0;
            DEPLOYMENT = 1;
            FALLBACK = 2;
        }
    }

    message TransferUsersRequest {
        repeated string userUuids = 1;
        TransferTargetValue target = 2;
    }

    message ResolvedTransferResponse {
        string userUuid = 1;
        string host = 2;
        uint32 port = 3;
    }
}

// Channel Management
message ChannelManagement {
    message ChannelMessageValue {
        string channel = 1;
        uint32 id = 2;
        string data = 3;
        uint64 timestamp = 4;
    }
}

// Unit Information
message UnitInformation {
    message UnitListResponse {
        repeated SimpleUnitValue units = 1;
    }

    message SimpleUnitValue {
        string name = 1;
        string uuid = 2;
        optional string deployment = 3;
    }
}