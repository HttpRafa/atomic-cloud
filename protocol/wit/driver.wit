package cloudlet:driver;

interface log {
    variant level {
        debug,
        info,
        warn,
        error,
    }
    log-string: func(level: level, message: string);
}

interface http {
    variant method {
        get,
        patch,
        post,
        put,
        delete,
    }
    record header {
        key: string,
        value: string,
    }
    record response {
        status-code: u32,
        reason-phrase: string,
        headers: list<header>,
        bytes: list<u8>,
    }
    send-http-request: func(method: method, url: string, headers: list<header>, body: option<list<u8>>) -> option<response>;
}

interface api {
    get-name: func() -> string;
}

interface bridge {
    type uuid = string;

    /* Init */
    record information {
        authors: list<string>,
        version: string,
        ready: bool,
    }

    /* Cloudlet | Start */
    record capabilities {
        memory: option<u32>,
        max-allocations: option<u32>,
        child: option<string>,
    }

    record remote-controller {
        address: string,
    }
    /* Cloudlet | End */

    /* Allocation */
    record address {
        ip: string,
        port: u16,
    }

    /* Unit | Start */
    record resources {
        memory: u32,
        swap: u32,
        cpu: u32,
        io: u32,
        disk: u32,
        addresses: u32,
    }

    record setting {
        key: string,
        value: string,
    }

    variant retention {
        permanent,
        temporary,
    }

    record key-value {
        key: string,
        value: string,
    }

    record spec {
        settings: list<key-value>,
        environment: list<key-value>,
        disk-retention: retention,
        image: string,
    }

    record allocation {
        addresses: list<address>,
        resources: resources,
        spec: spec,
    }

    record auth {
        token: string,
    }

    record unit-proposal {
        name: string,
        deployment: option<string>,
        resources: resources,
        spec: spec,
    }

    record unit {
        name: string,
        uuid: uuid,
        deployment: option<string>,
        allocation: allocation,
        auth: auth,
    }
    /* Unit | End */

    resource generic-cloudlet {
        constructor(cloud-identifier: string, name: string, id: option<u32>, capabilities: capabilities, controller: remote-controller);
        allocate-addresses: func(unit: unit-proposal) -> result<list<address>, string>;
        deallocate-addresses: func(addresses: list<address>);

        start-unit: func(unit: unit);
        restart-unit: func(unit: unit);
        stop-unit: func(unit: unit);
    }

    resource generic-driver {
        constructor(cloud-identifier: string);
        init: func() -> information;
        init-cloudlet: func(name: string, capabilities: capabilities, controller: remote-controller) -> result<generic-cloudlet, string>;
    }
}

world driver {
    export bridge;
    import api;
    import log;
    import http;
}